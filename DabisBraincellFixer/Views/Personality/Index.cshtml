@model Microsoft.AspNetCore.Mvc.Rendering.SelectList

@{
    ViewData["Title"] = "Home";
}

<h2>Trigger Event</h2>

<form id="actionForm" asp-action="Index" method="post">
    <label for="selectedPersonality">Personality to load:</label>

    @Html.DropDownList(
        "selectedPersonality",               // name attr & POST parameter
        Model,                                  // SelectList passed in from controller
        "-- choose action --",
        new { @class = "form-select", id = "selectedPersonality" })

    <!-- hidden until “Other…” is picked -->
    @* Here until I can manually apend "__other" to the end of the list *@
    <input type="text"
           id="customAction"
           placeholder="Enter custom action…"
           class="form-control mt-2"
           style="display:none;" />

    <button id="sendBtn" type="submit" class="btn btn-primary mt-3">
        Send
    </button>
</form>

@if (TempData["Msg"] is string msg)
{
    <div class="mt-3 text-success">@msg</div>
}

<div id="result" class="mt-3 text-success"></div>

@section Scripts {
<script>
(() => {
    const ddl  = document.getElementById('selectedPersonality');
    const box  = document.getElementById('customAction');
    const form = document.getElementById('actionForm');

    // show / hide custom box when dropdown changes
    function toggleBox() {
        const show = ddl.value === '__other';
        box.style.display = show ? 'block' : 'none';
        if (show) { box.focus(); } else { box.value = ''; }
    }
    ddl.addEventListener('change', toggleBox);
    toggleBox();

    // intercept form submit so page doesn’t refresh
    form.addEventListener('submit', async (evt) => {
        evt.preventDefault();

        const chosen = ddl.value === '__other' ? box.value.trim()
                                               : ddl.value;
        if (!chosen) {
            alert('Please choose or enter an action.');
            return;
        }
        const payload = "action:personality:" + chosen;

        try {
            const resp = await fetch('http://localhost:8000/event', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ msg_msg: payload })
            });

            if (!resp.ok) throw new Error(resp.status + ' ' + resp.statusText);

            const text = await resp.text();
            document.getElementById('result').style.color = 'green';
            document.getElementById('result').innerText = 'Success: ' + text;
        } catch (err) {
            document.getElementById('result').style.color = 'red';
            document.getElementById('result').innerText = 'Error: ' + err;
        }
    });
})();
</script>
}
